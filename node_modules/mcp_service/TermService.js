var async = require('async');
var dc = require("mcp_db").dc;
var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var termStatus = require("mcp_constants").termStatus;
var log = esut.log;

var fs = require("fs");
var path = require("path");
var mcpUtil = require("mcp_util");
var fsUtil = mcpUtil.fsUtil;

var config = require('mcp_config');
var ec = config.ec;
var transaction = require('./Transaction.js');

var TermService = function(){};

/**
 *
 * @param cb
 */
TermService.prototype.findToOpen = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //find term to open
        function(cb)
        {
            //如果这次扫描在5秒之内即开将。
            var now = new Date().getTime() + 5000;
            var cond = {status:termStatus.NOT_ON_SALE,
                openTime:{$lte:now}};
            table.findOne(cond, {gameCode:1, code:1, nextCode:1, version:1},
            [], function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(!data)
                    {
                        cb(new Error("no term to open."));
                    }
                    else
                    {
                        cb(null, data);
                    }
                }
            });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.PRE_ON_SALE;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}

/**
 *
 * @param cb
 */
TermService.prototype.findToClose = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //find term to close
        function(cb)
        {
            //允许提前5秒结束
            var now = new Date().getTime() + 5000;
            var cond = {status:termStatus.ON_SALE, closeTime:{$lte:now}};
            table.findOne(cond, {gameCode:1, code:1, nextCode:1, version:1},
            [], function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(!data)
                    {
                        cb(new Error("no term to open."));
                    }
                    else
                    {
                        cb(null, data);
                    }
                }
            });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.PREEND;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}

/**
 * 扫描后台停售的期次
 * @param cb
 */
TermService.prototype.findToBackClose = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //find term to close
        function(cb)
        {
            var now = new Date().getTime();
            var cond = {status:termStatus.END};
            table.findOne(cond, {gameCode:1, code:1, nextCode:1, version:1},
            [], function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(!data)
                    {
                        cb(new Error("no term to open."));
                    }
                    else
                    {
                        cb(null, data);
                    }
                }
            });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.PRE_SEND;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}

/**
 * 扫描需要算奖的期次
 * @param cb
 */
TermService.prototype.findToCheck = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    var conn = dc.main.getConn();
    async.waterfall([
        //find term to close
        function(cb)
        {
            var cond = {status:termStatus.DRAW};
            table.findOne(cond, {wNum:1, gameCode:1, code:1, nextCode:1, version:1},
            [], function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(!data)
                    {
                        cb(new Error("no term to check."));
                    }
                    else
                    {
                        cb(null, data);
                    }
                }
            });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.IN_CALCULATE;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        },
        function(term, cb)
        {
            //创建临时表 和创建目录
            try{
                log.info("创建表");
                var dir = "/data/app/issue";
                var currDate = dateUtil.toCurrentDate();
                dir = path.join(dir,term.gameCode,currDate,term.code);
                fsUtil.createDirSync(dir);
                var tableName = term.gameCode+term.code;
                var sql = "create table  "+tableName+" as select * from hitticket";
                conn.execute(sql, {}, function (err, data) {
                    log.error(err);
                })
            }catch (err){
                log.error(err);
            }finally{
                cb(null, term);
            }
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}

/**
 * 扫描需要返奖的期次
 * @param cb
 */
TermService.prototype.findToPrize = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //find term to close
        function(cb)
        {
            var cond = {status:termStatus.CALCULATE};
            table.findOne(cond, {wNum:1, gameCode:1, code:1, nextCode:1, version:1},
                [], function(err, data){
                    if(err)
                    {
                        cb(err);
                    }
                    else
                    {
                        if(!data)
                        {
                            cb(new Error("no term to prize."));
                        }
                        else
                        {
                            cb(null, data);
                        }
                    }
                });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.IN_PAYOUT;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}


/**
 * 扫描需要封存的期次
 * @param cb
 */
TermService.prototype.findToSEAL = function(cb)
{
    var self = this;
    var table = dc.main.get("term");
    async.waterfall([
        //find term to close
        function(cb)
        {
            var cond = {status:termStatus.PAYOUT};
            table.findOne(cond, {wNum:1, gameCode:1, code:1, nextCode:1, version:1},
                [], function(err, data){
                    if(err)
                    {
                        cb(err);
                    }
                    else
                    {
                        if(!data)
                        {
                            cb(new Error("no term to prize."));
                        }
                        else
                        {
                            cb(null, data);
                        }
                    }
                });
        },
        //update term status
        function(term, cb)
        {
            var cond = {id:term.id, version:term.version};
            term.version++;
            term.status = termStatus.IN_SEAL;
            var data = {$set:{status:term.status, version:term.version}};
            table.update(cond, data, {}, function(err, data){
                if(err)
                {
                    cb(err);
                }
                else
                {
                    if(data.affectedRows < 1)
                    {
                        cb("transaction failed");
                    }
                    else
                    {
                        cb(err, term);
                    }
                }
            });
        }
    ], function (err, result) {
        if(err)
        {
            cb(err, null);
        }
        else
        {
            cb(null, result);
        }
    });
}

/**
 * 期次开奖
 * @param cb
 */
TermService.prototype.draw = function(fromTerm, cb)
{
    var self = this;
    var table = dc.main.get("term");
    transaction.run(function(wCb){
        async.waterfall([
            //find term to open
            function(cb)
            {
                var cond = {id:fromTerm.id};
                var cols = {version:1, status:1, gameCode:1, code:1,
                    nextCode:1, openTime:1, closeTime:1, pool:1, wNum:1};
                table.findOne(cond, cols, [], function(err, data){
                    if(err || data == null )
                    {
                        cb(ec.E0999);
                    }
                    else
                    {
                        cb(null, data);
                    }
                });
            },
            //校验期次状态
            function(term, cb)
            {
                if(term.status != termStatus.WAITING_DRAW_NUMBER)
                {
                    cb(ec.E2057);
                }
                else
                {
                    cb(null, term);
                }
            },
            //update term status
            function(term, cb)
            {
                var cond = {id:term.id, version:term.version};
                term.status = termStatus.DRAW;
                term.bonusTime= new Date().getTime();
                term.version++;
                var data = {$set:{status:term.status, bonusTime:term.bonusTime, version:term.version}};
                //如果传了开奖号码
                if(fromTerm.wNum)
                {
                    data.$set.wNum = fromTerm.wNum;
                    term.wNum = fromTerm.wNum;
                }
                table.update(cond, data, {}, function(err, data){
                    if(err) {
                        cb(ec.E0999);
                        return;
                    }
                    if(data.affectedRows == 1)
                    {
                        cb(ec.E0000, term);
                    }
                    else
                    {
                        cb(ec.E9999);
                    }
                });
            }
        ], function (err, result) {
            wCb(err, result);
        });
    }, function(err, data){
        cb(err, data);
    });
}

/**
 * 更新期次状态
 * @param cb
 */
TermService.prototype.updateStatusById = function(fromTerm, cb)
{
    var self = this;
    var table = dc.main.get("term");
    transaction.run(function(wCb){
        async.waterfall([
            //find term to handle
            function(cb)
            {
                var cond = {id:fromTerm.id};
                var cols = {version:1, status:1, gameCode:1, code:1,
                    nextCode:1, openTime:1, closeTime:1, pool:1, wNum:1};
                table.findOne(cond, cols, [], function(err, data){
                    if(err || data == null)
                    {
                        cb(ec.E0999);
                    }
                    else
                    {
                        cb(null, data);
                    }
                });
            },
            //update term status
            function(term, cb)
            {
                var cond = {id:term.id, version:term.version};
                term.status = fromTerm.status;
                term.version++;
                var data = {$set:{status:term.status, version:term.version}};
                table.update(cond, data, {}, function(err, data){
                    if(err)
                    {
                        cb(ec.E0999);
                    }
                    else
                    {
                        if(data.affectedRows == 1)
                        {
                            cb(ec.E0000, term);
                        }
                        else
                        {
                            cb(ec.E9999);
                        }
                    }
                });
            }
        ], function (err, result) {
            wCb(err, result);
        });
    }, function(err, data){
        cb(err, data);
    });
}

module.exports = new TermService();