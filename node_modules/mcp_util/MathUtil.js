var MathUtil = function(){};

/**
 * 把字符串数组转换成int数组
 * @param strArray
 * @returns {Int32Array}
 */
MathUtil.prototype.getIntArrayFromStrArray = function(strArray)
{
    var self = this;
    var rst = new Int32Array(strArray.length);
    for(var key in strArray)
    {
        rst[key] = parseInt(strArray[key]);
    }
    return rst;
}

/**
 * 查看整数数组是否按从小到大排列，不能相等
 * @param intArray
 * @returns {boolean}
 */
MathUtil.prototype.isFromMinToMax = function(intArray)
{
    var self = this;
    if(intArray.length == 1)
    {
        return true;
    }
    var rst = true;
    for(var i = 0; i < intArray.length - 1; i++)
    {
        if(intArray[i] >= intArray[i + 1])
        {
            rst = false;
            break;
        }
    }
    return rst;
}

/**
 * 查看整数数组是否按从小到大排列，可以相等
 * @param intArray
 * @returns {boolean}
 */
MathUtil.prototype.isFromMinToMaxCanEqual = function(intArray)
{
    var self = this;
    if(intArray.length == 1)
    {
        return true;
    }
    var rst = true;
    for(var i = 0; i < intArray.length - 1; i++)
    {
        if(intArray[i] > intArray[i + 1])
        {
            rst = false;
            break;
        }
    }
    return rst;
}

/**
 * 获得A(m,n)的值
 * @param m
 * @param n
 */
MathUtil.prototype.getA = function(m, n)
{
    var self = this;
    var value = 1;
    for (var i = 0; i < n; i++) {
        value = value * (m - i);
    }
    return value;
}

/**
 * 获得C(m,n)的值
 * @param m
 * @param n
 * @returns {number}
 */
MathUtil.prototype.getC = function(m, n)
{
    var self = this;
    if ((m < n) || (n < 0)) {
        return 0;
    }
    return self.getA(m, n) / self.getA(n, n);
}

module.exports = new MathUtil();