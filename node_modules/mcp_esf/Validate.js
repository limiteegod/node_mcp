var async = require('async');

var config = require('mcp_config');
var ec = config.ec;
var game = config.game;

var esut = require('easy_util');
var log = esut.log;

var dc = require("mcp_db").dc;

var util = require('mcp_util');
var mathUtil = util.mathUtil;

var Validate = function(){
    var self = this;
    self.zxHeZhiList=[];
    self.zxHeZhiList[0] = 0;
    self.zxHeZhiList[1] = 0;
    self.zxHeZhiList[2] = 0;
    self.zxHeZhiList[3] = 1;
    self.zxHeZhiList[4] = 1;
    self.zxHeZhiList[5] = 2;
    self.zxHeZhiList[6] = 2;
    self.zxHeZhiList[7] = 3;
    self.zxHeZhiList[8] = 3;
    self.zxHeZhiList[9] = 4;
    self.zxHeZhiList[10] = 4;
    self.zxHeZhiList[11] = 5;
    self.zxHeZhiList[12] = 5;
    self.zxHeZhiList[13] = 5;
    self.zxHeZhiList[14] = 4;
    self.zxHeZhiList[15] = 4;
    self.zxHeZhiList[16] = 3;
    self.zxHeZhiList[17] = 3;
    self.zxHeZhiList[18] = 2;
    self.zxHeZhiList[19] = 2;
    self.zxHeZhiList[20] = 1;
    self.zxHeZhiList[21] = 1;

    self.zxKuaDuList = new Array(0,10,9,8,7,6,5,4,3,2,1);
};

Validate.prototype.validate = function(order, ticket, cb)
{
    var self = this;
    var tickets = order.tickets;
    var name = "validate" + ticket.pType + ticket.bType;
    if(self[name])
    {
        var number = ticket.number;
        if(!number)
        {
            cb(ec.E2066);
            return;
        }
        self[name](order, ticket, function(err, count){
            if(err)
            {
                cb(err);
            }
            else
            {
                var price = game.getInfo(ticket.gameCode, ticket.pType).price;
                //校验注数
                if(count*ticket.multiple*price != ticket.amount)
                {
                    cb(ec.E2061);
                }
                else
                {
                    cb(null);
                }
            }
        });
    }
    else
    {
        cb(ec.E2062);
    }
}

/**
 * 11选5 任选一复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2101 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,10}$/;
    if(!reg.test(number)){
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if(!mathUtil.isFromMinToMax(intArray)){
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray, 0 ,11)){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length , 1);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 人选二单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2200 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2})$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 人选二复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2201 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){2,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 2);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 人选二胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2202 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var dan = mathUtil.getIntValue(numberArray[0]);
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(dan < 0 || dan > 11 ){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.arrayConstants(intArray, dan)){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 1);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 人选三单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2300 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){2}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 人选三复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2301 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){3,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 3);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 人选三胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2302 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2})?\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var danArray = mathUtil.getIntValue(numberArray[0].split(','));
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray,0,11)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(danArray , intArray) > 0){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 3 - danArray.length);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 人选四单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2400 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){3}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 人选四复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2401 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){4,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 4);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 人选四胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2402 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){0,2}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var danArray = mathUtil.getIntValue(numberArray[0].split(','));
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray,0,11)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(danArray , intArray) > 0){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 4 - danArray.length);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 任选五单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2500 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){4}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 任选五复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2501 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){5,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 5);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 任选五胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2502 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){0,3}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var danArray = mathUtil.getIntValue(numberArray[0].split(','));
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray,0,11)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(danArray , intArray) > 0){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 5 - danArray.length);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 任选六单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2600 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){5}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 任选六复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2601 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){5,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 6);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 任选六胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2602 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){0,4}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var danArray = mathUtil.getIntValue(numberArray[0].split(','));
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray,0,11)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(danArray , intArray) > 0){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 6 - danArray.length);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 任选七单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2700 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){6}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 11选5 任选六复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2701 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){6,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 7);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 任选七胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2702 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){0,5}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var danArray = mathUtil.getIntValue(numberArray[0].split(','));
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(intArray,0,11)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(danArray , intArray) > 0){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 7 - danArray.length);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 任选八单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2800 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2}){7}$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}


/**
 * 11选5 前二组选单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2900 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(,\d{2})$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}
/**
 * 11选5 前二组选复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2901 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 2);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 前二组选胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2902 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}\$\d{2}(,\d{2}){1,9}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var numberArray = number.split('$');
    var dan = mathUtil.getIntValue(numberArray[0]);
    var intArray = mathUtil.getIntArrayFromStrArray(numberArray[1].split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    if(dan < 0 || dan > 11 ){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.arrayConstants(intArray, dan)){
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getC(intArray.length, 1);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 前二组选合值
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2903 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,20}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 3, 21)) {
        cb(ec.E2066);
        return;
    }
    var count = 0
    for(var key in intArray){
        count += self.zxHeZhiList[key];
    }
    if(count < 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 前二组选跨度
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate2906 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 1, 10)) {
        cb(ec.E2066);
        return;
    }
    var count = 0
    for(var key in intArray){
        count += self.zxKuaDuList[key];
    }
    if(count < 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 前二直选单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate3000 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var items = number.split(';');
    for (var key in items) {
        var reg = /^\d{2}(\|\d{2})$/;
        if (!reg.test(key)) {
            log.info("正则表达式校验不通过");
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(number.split('|'));
        if (!mathUtil.isFromMinToMax(intArray)) {
            cb(ec.E2066);
            return;
        }
        if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}
/**
 * 11选5 前二直选复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate3001 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 0, 11)) {
        cb(ec.E2066);
        return;
    }
    var count = mathUtil.getA(intArray.length, 2);
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}


/**
 * 11选5 前二直选合值
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate3003 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,20}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 3, 21)) {
        cb(ec.E2066);
        return;
    }
    var count = 0
    for(var key in intArray){
        count += 2*self.zxHeZhiList[key];
    }
    if(count < 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 前二组选跨度
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate3006 = function(order, ticket, cb){
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d{2}){1,10}$/;
    if (!reg.test(number)) {
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(number.split(','));
    if (!mathUtil.isFromMinToMax(intArray)) {
        cb(ec.E2066);
        return;
    }
    if (!mathUtil.isMinAndMaxBetween(intArray, 1, 10)) {
        cb(ec.E2066);
        return;
    }
    var count = 0
    for(var key in intArray){
        count += 2*self.zxKuaDuList[key];
    }
    if(count < 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}

/**
 * 11选5 前二直选定位
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate3007 = function(order, ticket, cb) {
    var self = this;
    var number = ticket.number;
    var reg = /^\d{2}(,\d){0,9}\|\d{2}(,\d{2}){0,9}$/;
    if(!reg.test(number)){
        log.info("正则表达式校验不通过");
        cb(ec.E2066);
        return;
    }
    var firstArray = mathUtil.getIntArrayFromStrArray(number.split('|')[0].split(','));
    var secondArray = mathUtil.getIntArrayFromStrArray(number.split('|')[1].split(','));
    if(!mathUtil.isFromMinToMax(firstArray)){
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isFromMinToMax(secondArray)){
        cb(ec.E2066);
        return;
    }
    if(mathUtil.getHitCount(firstArray, secondArray) > 0 ){
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(firstArray)){
        cb(ec.E2066);
        return;
    }
    if(!mathUtil.isMinAndMaxBetween(secondArray)){
        cb(ec.E2066);
        return;
    }
    var count = firstArray.length*secondArray.length;
    if(count <= 1){
        cb(ec.E2066);
        return;
    }
    cb(null, count);
}
module.exports = new Validate();