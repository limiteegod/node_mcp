var async = require('async');

var config = require('mcp_config');
var ec = config.ec;
var game = config.game;

var esut = require('easy_util');
var log = esut.log;

var dc = require("mcp_db").dc;

var util = require('mcp_util');
var mathUtil = util.mathUtil;

var NumType = require('./NumType.js');

var Validate = function(){};

Validate.prototype.validate = function(order, ticket, cb)
{
    var self = this;
    var tickets = order.tickets;
    var name = "validate" + ticket.pType + ticket.bType;
    if(self[name])
    {
        var number = ticket.number;
        if(!number)
        {
            cb(ec.E2066);
            return;
        }
        self[name](order, ticket, function(err, count){
            if(err)
            {
                cb(err);
            }
            else
            {
                var price = game.getInfo(ticket.gameCode, ticket.pType).price;
                //校验注数
                if(count*ticket.multiple*price != ticket.amount)
                {
                    cb(ec.E2061);
                }
                else
                {
                    cb(null);
                }
            }
        });
    }
    else
    {
        cb(ec.E2062);
    }
}

/**
 * 组24，单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0100 = function(order, ticket, cb)
{
    var self = this;
    var number = ticket.number;
    var items = number.split(";");
    for(var key in items)
    {
        var item = items[key];
        var reg = /^[0-9]{1}(,[0-9]){3}$/;
        if(!reg.test(item))
        {
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(item.split(","));
        if(!mathUtil.isFromMinToMax(intArray))
        {
            cb(ec.E2066);
            return;
        }
        if(intArray[0] < 1 || intArray[intArray.length - 1] > 8)
        {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}

/**
 * 组24，复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0101 = function(order, ticket, cb)
{
    var self = this;
    var item = ticket.number;
    var reg = /^[0-9]{1}(,[0-9]){4,7}$/;
    if(!reg.test(item))
    {
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(item.split(","));
    if(!mathUtil.isFromMinToMax(intArray))
    {
        cb(ec.E2066);
        return;
    }
    if(intArray[0] < 1 || intArray[intArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }
    cb(null, mathUtil.getC(intArray.length, 4));
}

/**
 * 组24，胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0102 = function(order, ticket, cb)
{
    var self = this;
    var item = ticket.number;
    var reg = /^[0-9]{1}(,[0-9]){0,2}\$[0-9]{1}(,[0-9]){1,6}$/;
    if(!reg.test(item))
    {
        cb(ec.E2066);
        return;
    }
    var numStrArray = item.split("$");
    var danStr = numStrArray[0];
    var tuoStr = numStrArray[1];

    var danIntArray = mathUtil.getIntArrayFromStrArray(danStr.split(","));
    if(!mathUtil.isFromMinToMax(danIntArray))
    {
        cb(ec.E2066);
        return;
    }
    if(danIntArray[0] < 1 || danIntArray[danIntArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }

    var tuoIntArray = mathUtil.getIntArrayFromStrArray(tuoStr.split(","));
    if(!mathUtil.isFromMinToMax(tuoIntArray))
    {
        cb(ec.E2066);
        return;
    }
    if(tuoIntArray[0] < 1 || tuoIntArray[tuoIntArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }

    var hitCount = mathUtil.getHitCount(danIntArray, tuoIntArray);
    if(hitCount > 0)
    {
        cb(ec.E2066);
        return;
    }

    var m = tuoIntArray.length, n = 4 - danIntArray.length;
    cb(null, mathUtil.getC(m, n));
}

/**
 * 组12，单式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0200 = function(order, ticket, cb)
{
    var self = this;
    var number = ticket.number;
    var items = number.split(";");
    for(var key in items)
    {
        var item = items[key];
        var reg = /^[0-9]{1}(,[0-9]){3}$/;
        if(!reg.test(item))
        {
            cb(ec.E2066);
            return;
        }
        var intArray = mathUtil.getIntArrayFromStrArray(item.split(","));
        if(!mathUtil.isFromMinToMaxCanEqual(intArray))
        {
            cb(ec.E2066);
            return;
        }
        if(intArray[0] < 1 || intArray[intArray.length - 1] > 8)
        {
            cb(ec.E2066);
            return;
        }
        var nt = new NumType(item);
        if(!nt.isZ12())
        {
            cb(ec.E2066);
            return;
        }
    }
    cb(null, items.length);
}


/**
 * 组12，复式
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0201 = function(order, ticket, cb)
{
    var self = this;
    var item = ticket.number;
    var reg = /^[0-9]{1}(,[0-9]){2,7}$/;
    if(!reg.test(item))
    {
        cb(ec.E2066);
        return;
    }
    var intArray = mathUtil.getIntArrayFromStrArray(item.split(","));
    if(!mathUtil.isFromMinToMax(intArray))
    {
        cb(ec.E2066);
        return;
    }
    if(intArray[0] < 1 || intArray[intArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }
    cb(null, mathUtil.getC(intArray.length, 3)*3);
}

/**
 * 组12，胆拖
 * @param order
 * @param ticket
 * @param cb
 */
Validate.prototype.validate0202 = function(order, ticket, cb)
{
    var self = this;
    var item = ticket.number;
    var reg = /^[0-9]{1}(,[0-9]){0,1}\$[0-9]{1}(,[0-9]){1,6}$/;
    if(!reg.test(item))
    {
        cb(ec.E2066);
        return;
    }
    var numStrArray = item.split("$");
    var danStr = numStrArray[0];
    var tuoStr = numStrArray[1];

    var danIntArray = mathUtil.getIntArrayFromStrArray(danStr.split(","));
    if(!mathUtil.isFromMinToMax(danIntArray))
    {
        cb(ec.E2066);
        return;
    }
    if(danIntArray[0] < 1 || danIntArray[danIntArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }

    var tuoIntArray = mathUtil.getIntArrayFromStrArray(tuoStr.split(","));
    if(!mathUtil.isFromMinToMax(tuoIntArray))
    {
        cb(ec.E2066);
        return;
    }
    if(tuoIntArray[0] < 1 || tuoIntArray[tuoIntArray.length - 1] > 8)
    {
        cb(ec.E2066);
        return;
    }

    var hitCount = mathUtil.getHitCount(danIntArray, tuoIntArray);
    if(hitCount > 0)
    {
        cb(ec.E2066);
        return;
    }

    var m = tuoIntArray.length, n = 3 - danIntArray.length;
    cb(null, mathUtil.getC(m, n)*3);
}

module.exports = new Validate();