var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;
var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;
var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var IssueModel = function(){};

/**
 * 查找需要处理的期次
 * @param cb
 */
IssueModel.prototype.findToHandle = function(cb)
{
    var self = this;
    async.waterfall([
        //是否需要有开售的期次
        function(cb)
        {
            termSer.findToOpen(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要停售的期次
        function(cb)
        {
            termSer.findToClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要后台停售的期次
        function(cb)
        {
            termSer.findToBackClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要算奖的期次
        function(cb)
        {
            termSer.findToCheck(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

module.exports = new IssueModel();