var async = require('async');

var esut = require('easy_util');
var log = esut.log;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var ticketStatus = cons.ticketStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var gameStatus = cons.gameStatus;
var gameType = cons.gameType;

var config = require('mcp_config');
var game = config.game;
var ec = config.ec;

var dc = require("mcp_db").dc;

var feoValidate = require("mcp_feo").validate;
var dltValidate = require("mcp_dlt").validate;
var fsdValidate = require("mcp_fsd").validate;
var esfValidate = require("mcp_esf").validate;
var ktValidate = require("mcp_kt").validate;
var jcValidate = require("mcp_jc").validate;

var ValidateFactory = function(){};

ValidateFactory.prototype.validate = function(order, cb)
{
    var self = this;
    var terms = {}; //缓存期次信息
    var relations = {}; //缓存销售关系
    var games = {}; //缓存游戏信息
    var tickets = order.tickets;
    //票据不能为空
    if(tickets == undefined || tickets == null)
    {
        cb(ec.E2070, null);
        return;
    }
    var totalTicketAmount = 0;
    if(!order.outerId)
    {
        cb(ec.E2064, null);
        return;
    }
    async.eachSeries(tickets, function(ticket, callback) {
        var name = "validate" + ticket.gameCode;
        totalTicketAmount += ticket.amount;
        async.waterfall([
            //校验外部id号
            function(cb)
            {
                if (!ticket.outerId)
                {
                    cb(ec.E2064);
                }
                else
                {
                    cb(null);
                }
            },
            //校验游戏
            function(cb)
            {
                var game = games[ticket.gameCode];
                if(game == undefined)   //未缓存
                {
                    var gamePermission =  dc.mg.get("gamePermission");
                    var gameCond = {_id:ticket.gameCode};
                    gamePermission.findOne(gameCond, {}, [], function(err, data){
                        if(err)
                        {
                            cb(ec.E0999);
                        }
                        else
                        {
                            if(data)
                            {
                                games[ticket.gameCode] = data;
                                if(data.gamePermission  == gameStatus.USABLE)
                                {
                                    cb(null);
                                }
                                else
                                {
                                    cb(ec.E2068);
                                }
                            }
                            else
                            {
                                cb(ec.E2068);
                            }
                        }
                    });
                }
                else    //已经缓存
                {
                    if(game.gamePermission  == gameStatus.USABLE)
                    {
                        cb(null);
                    }
                    else
                    {
                        cb(ec.E2068);
                    }
                }
            },
            //校验出票机构
            function(cb)
            {
                var id = order.customerId + "_" + ticket.gameCode;
                var relation = relations[id];
                if(relation == undefined)
                {
                    var table = dc.mg.get("relation");
                    var cond = {_id:id};
                    table.findOne(cond, {}, [], function(err, data){
                        if(err)
                        {
                            cb(ec.E0999);
                        }
                        else
                        {
                            if(data == null || data == undefined)
                            {
                                cb(ec.E2068);
                            }
                            else
                            {
                                relations[id] = data;
                                ticket.printId = data.relayTo;
                                cb(null);
                            }
                        }
                    });
                }
                else
                {
                    ticket.printId = relation.relayTo;
                    cb(null);
                }
            },
            //校验号码格式
            function(cb)
            {
                if(self[name])
                {
                    self[name](order, ticket, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(ec.E2063);
                }
            },
            //校验期次号
            function(cb)
            {
                self.checkTerm(terms, ticket, function(err, term){
                    cb(err);
                });
            }
        ], function (err, result) {
            if(err)
            {
                ticket.ec = err;
            }
            else
            {
                ticket.ec = ec.E0000;
            }
            callback();
        });
    }, function(err){
        //校验订单金额
        if(totalTicketAmount != order.amount)
        {
            cb(ec.E2061);
        }
        else
        {
            cb(null);
        }
    });
};

/**
 * 获取期次状态
 * @param gameCode
 * @param termCode
 */
ValidateFactory.prototype.checkTerm = function(terms, ticket, cb)
{
    var keys = [];
    var ticketGame = game.getInfo(ticket.gameCode);
    if(ticketGame.type == gameType.Jingcai)
    {
        var number = ticket.number;
        var items = number.split(";");
        for(var i = 0; i < items.length; i++)
        {
            var curMatch = items[i];
            var curMatchDetailArray = curMatch.split("|");
            keys.push(ticket.gameCode + "_" + curMatchDetailArray[1]);
        }
    }
    else
    {
        keys.push(ticket.gameCode + "_" + ticket.termCode);
    }
    async.eachSeries(keys, function(key, callback) {
        async.waterfall([
            //获得期次
            function(cb)
            {
                var term = terms[key];
                if(!term) {
                    var table = dc.main.get("term");
                    table.findOne({id: key}, {}, [], function (err, data) {
                        if (err)
                        {
                            cb(ec.E0999);
                        }
                        else
                        {
                            if(data)
                            {
                                cb(null, data);
                            }
                            else
                            {
                                cb(ec.E2065);
                            }
                        }
                    });
                }
                else
                {
                    cb(null, term);
                }
            },
            //校验期次状态
            function(term, cb)
            {
                //期次必须在销售状态
                if(term.status != termStatus.ON_SALE)
                {
                    cb(ec.E2008);
                }
                else
                {
                    ticket.status = ticketStatus.UN_OPEN;
                    ticket.printStatus = ticketPrintStatus.WAITING_PRINT;
                    cb(null);
                }
            }
        ], function (err, result) {
            callback(err);
        });
    }, function(err){
        cb(err);
    });
};

ValidateFactory.prototype.validateT06 = function(order, ticket, cb)
{
    var self = this;
    feoValidate.validate(order, ticket, cb);
};

/**
 * 大乐透
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateT01 = function(order, ticket, cb)
{
    var self = this;
    dltValidate.validate(order, ticket, cb);
};

/**
 * 11 选 5
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateT05 = function(order, ticket, cb)
{
    var self = this;
    esfValidate.validate(order, ticket, cb);
};

/**
 * 福彩3d
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateF02 = function(order, ticket, cb)
{
    var self = this;
    fsdValidate.validate(order, ticket, cb);
};

/**
 * 快三
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateF04 = function(order, ticket, cb)
{
    var self = this;
    ktValidate.validate(order, ticket, cb);
};

/**
 * 竞彩
 * @param order
 * @param ticket
 * @param cb
 */
ValidateFactory.prototype.validateT51 = function(order, ticket, cb)
{
    var self = this;
    jcValidate.validate(order, ticket, cb);
}

module.exports = new ValidateFactory();