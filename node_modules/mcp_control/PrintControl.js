var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var pageUtil = esut.pageUtil;

var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var ticketPrintStatus = cons.ticketPrintStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var kvSer = service.kvSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;

var PrintControl = function(){
    var self = this;
    self.cmd = {'P01':1, 'P02':2, 'P03':3, 'P04':4,
    'P05':5};
    self.cmdArray = [{},
        {id:1, code:'P01', fromType:prop.digestFromType.FIX, des:"取票"},
        {id:2, code:'P02', fromType:prop.digestFromType.FIX, des:"出票成功"},
        {id:3, code:'P03', fromType:prop.digestFromType.FIX, des:"投注"},
        {id:4, code:'P04', fromType:prop.digestFromType.FIX, des:""},
        {id:5, code:'P05', fromType:prop.digestFromType.FIX, des:""}
    ];
};

PrintControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


PrintControl.prototype.checkP01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    cb(null);
};

PrintControl.prototype.checkP04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

PrintControl.prototype.checkP08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


PrintControl.prototype.checkP09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * 取票
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP01 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("printqueen");
    pageUtil.parsePost(bodyNode, backBodyNode);
    var now = new Date().getTime();
    var limit = backBodyNode.limit;
    var count = 0;
    var hasNext = true;
    var rst = [];

    async.whilst(
        function() { return count < limit && hasNext},
        function(whileCb) {
            var cond = {status:ticketPrintQueenStatus.WAITING_GET, printId:headNode.userId};
            var sort = {};
            var doc = {$set:{status:ticketPrintQueenStatus.TAKE_AWAY,
                takeTime:now}};
            table.findAndModify(cond, sort, doc, [], function(err, data){
                if(data)
                {
                    data.id = data._id;
                    delete data._id;
                    delete data.version;
                    delete data.status;
                    delete data.printId;
                    rst[rst.length] = data;
                }
                else
                {
                    hasNext = false;
                }
                whileCb();
            });
        },
        function(err) {
            backBodyNode.rst = rst;
            cb(err, backBodyNode);
        }
    );
};

/**
 * 出票返回
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP02 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var objs = bodyNode.rst;
    log.info("p02------------------------");
    log.info(objs);
    var table = dc.mg.get("printqueen");
    async.each(objs, function(ticket, callback) {
        var cond = {_id:ticket.id};
        var sort = {};
        if(ticket.status == ticketPrintStatus.PRINT_SUCCESS)
        {
            ticketSer.printSuccess(ticket, function(err, backTicket){
                if(err)
                {
                    log.info(err);
                    callback();
                    return;
                }
                backTicket.id = backTicket._id;
                delete backTicket._id;
                delete backTicket.printId;
                delete backTicket.takeTime;
                delete backTicket.version;
                notifySer.saveTicket(backTicket, function(err, data){
                    callback(err);
                });
            });
        }
        else
        {
            var doc = {$set:{status:ticketPrintQueenStatus.PRINT_FAILURE}};
            table.findAndModify(cond, sort, doc, [], function(err, data){
                log.info(data);
                callback();
            });
        }
    }, function(err){
        cb(err, backBodyNode);
    });
};

/**
 * 渠道投注接口
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP03 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP04 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
PrintControl.prototype.handleP05 = function(user, headNode, bodyNode, cb)
{
};

var printControl = new PrintControl();
module.exports = printControl;