var esut = require('easy_util');
var dc = require('mcp_db').dc;
var config = require('mcp_config');
var game = config.game;
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;
var async = require('async');
var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;

var TermPageControl = function(){};

TermPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    console.log(bodyNode);
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};

TermPageControl.prototype.list = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    pageUtil.parse(bodyNode, backBodyNode);
    backBodyNode.termStatus = termStatus;
    var termTable = dc.main.get("term");
    var cursor = termTable.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).limit(backBodyNode.skip, backBodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.game = game.getInfo(set.gameCode);
            set.status = termStatus.getInfoById(set.status);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

TermPageControl.prototype.msgList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"view terms"};
    pageUtil.parse(bodyNode, backBodyNode);
    async.waterfall([
        function(cb)
        {
            var termTable = dc.mg_msg.get("detail_term");
            var cursor = termTable.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
            cursor.toArray(function(err, data){
                if(err)
                {
                    cb(ec.E0999);
                }
                else
                {
                    for(var key in data)
                    {
                        var set = data[key];
                        set.game = game.getInfo(set.gameCode);
                        set.status = termStatus.getInfoById(set.status);
                    }
                    backBodyNode.rst = data;
                    backBodyNode.count = cursor.count(function(err, count){
                        backBodyNode.count = count;
                        cb(null, data);
                    });
                }
            });
        },
        function(details, cb)
        {
            async.each(details, function(row, callback) {
                var table = dc.mg_msg.get("msg");
                table.findOne({_id:row.msgId}, {}, [], function(err, data){
                    if(err)
                    {
                        callback(ec.E0999);
                    }
                    else
                    {
                        data.status = msgStatus.getInfoById(data.status);
                        data.createTime = dateUtil.toString(data.createTime);
                        data.finishTime = dateUtil.toString(data.finishTime);
                        row.msg = data;
                        callback();
                    }
                });
            }, function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        log.info(backBodyNode);
        cb(err, backBodyNode);
    });
};

TermPageControl.prototype.detail = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"期次详情"};
    backBodyNode.termStatus = termStatus.getInfoById();
    backBodyNode.game = game.getInfo();
    var table = dc.main.get("term");
    table.findOne({id:bodyNode.id}, {}, [], function(err, data){
        backBodyNode.term = data;
        cb(null, backBodyNode);
    }, {dateToString:true});
};

module.exports = new TermPageControl();