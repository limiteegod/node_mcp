var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require("mcp_service");
var digestSer = service.digestSer;


var ChannelTradeControl = function(){
    var self = this;
    self.cmd = {'CT01':1, 'CT02':2, 'CT03':3, 'CT04':4,
    'CT05':5};
    self.cmdArray = [{},
        {id:1, code:'CT01', fromType:prop.digestFromType.FIX, des:""},
        {id:2, code:'CT02', fromType:prop.digestFromType.FIX, des:""},
        {id:3, code:'CT03', fromType:prop.digestFromType.FIX, des:"投注"},
        {id:4, code:'CT04', fromType:prop.digestFromType.FIX, des:""},
        {id:5, code:'CT05', fromType:prop.digestFromType.FIX, des:""}
    ];
};

ChannelTradeControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            try {
                var bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
                cb(null, bodyNode);
            }
            catch (err)
            {
                cb(ec.E9003);
            }
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                cb(err, bodyNode);
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


ChannelTradeControl.prototype.checkCT01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT03 = function(user, headNode, bodyNode, cb)
{

    cb(null);
};

ChannelTradeControl.prototype.checkCT04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


ChannelTradeControl.prototype.checkCT09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * find one's all operations
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT01 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 获取权限树
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT02 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT03 = function(user, headNode, bodyNode, cb)
{

};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT04 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT05 = function(user, headNode, bodyNode, cb)
{
};

var channelTradeControl = new ChannelTradeControl();
module.exports = channelTradeControl;