var dc = require('mcp_db').dc;
var moment = require('moment');
var async = require('async');

var config = require('mcp_config');
var game = config.game;

var esut = require('easy_util');
var dateUtil = esut.dateUtil;
var digestUtil = esut.digestUtil;
var log = esut.log;
var pageUtil = esut.pageUtil;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;

var util = require('mcp_util');
var dateMathUtil=util.dateMathUtil;

var PrintPageControl = function(){};

PrintPageControl.prototype.handle = function(headNode, bodyNode, cb)
{
    var self = this;
    var cmd = headNode.cmd;
    self[cmd[1]](headNode, bodyNode, cb);
};

PrintPageControl.prototype.queenList = function(headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {title:"出票队列"};
    log.info(bodyNode);
    backBodyNode.sort = {_id:-1};
    pageUtil.parse(bodyNode, backBodyNode);
    var table = dc.mg.get("printqueen");
    var cursor = table.find(backBodyNode.cond, {}, []).sort(backBodyNode.sort).skip(backBodyNode.skip).limit(backBodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.status = ticketPrintQueenStatus.getInfoById(set.status);
            set.createTime = dateUtil.toString(set.createTime);
            set.game = game.getInfo(set.gameCode);
            set.playType = game.getInfo(set.gameCode,set.pType);
            set.betType = game.getInfo(set.gameCode,set.pType,set.bType);
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            var _sort = {createTime:1};
            var _msg = {_id: 1, createTime: 1}
            var _cursor = table.find(backBodyNode.cond, _msg, []).sort(_sort).skip(0).limit(5);
            _cursor.toArray(function(err, data){
                for(var key in data){
                     var set = data[key];
                     set.info = dateMathUtil.secondBetween(moment(set.createTime).format("YYYY-MM-DD HH:mm:ss"));
                }
                backBodyNode.msg=data;
                cb(null, backBodyNode);
            });

        });
    });
};

module.exports = new PrintPageControl();