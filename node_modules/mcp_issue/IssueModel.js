var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;
var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;
var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;

var cons = require('mcp_constants');
var ticketStatus = cons.ticketStatus;
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var cp = require('mcp_cp');
var checkFac = cp.checkFac;


var IssueModel = function(){};

/**
 * 查找需要处理的期次
 * @param cb
 */
IssueModel.prototype.findToHandle = function(cb)
{
    var self = this;
    async.waterfall([
        //是否需要有开售的期次
        function(cb)
        {
            termSer.findToOpen(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要停售的期次
        function(cb)
        {
            termSer.findToClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要后台停售的期次
        function(cb)
        {
            termSer.findToBackClose(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        },
        //是否有需要算奖的期次
        function(cb)
        {
            termSer.findToCheck(function(err, term){
                if(term)
                {
                    msgSer.saveTerm(term, function(err, data){
                        cb(err);
                    });
                }
                else
                {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 算奖
 * @param cb
 */
IssueModel.prototype.check = function(msg, dTerm, cb)
{
    var self = this;
    var colName = dTerm.gameCode + "_" + dTerm.code + "_" + msg.sep;
    var table = dc.mg.getConn().collection(colName);
    var cursor = table.find({}, {}, {snapshot:true});
    async.waterfall([
        //获得奖级
        function(cb)
        {
            var cond = {gameCode:dTerm.gameCode, termCode:dTerm.code};
            var sort = {level:1};
            var gradeTable = dc.main.get("gamegrade");
            gradeTable.find(cond, {level:1, bonus:1}).sort(sort).toArray(function(err, data){
                log.info(err);
                log.info(data);
                if(err)
                {
                    cb(err);
                    return;
                }
                var check = checkFac.getCheck(dTerm.gameCode, data, dTerm.wNum);
                cb(null, check);
            });
        },
        //查看一共有多少条记录
        function(check, cb)
        {
            cursor.count(function(err, count){
                cb(err, check, count);
            });
        },
        //遍历每一条记录
        function(check, count, cb)
        {
            log.info(colName + ",开始遍历记录.......");
            var curCount = 0;
            async.whilst(
                function () { return curCount < count;},
                function (callback) {
                    cursor.nextObject(function(err, ticket){
                        if(ticket)
                        {
                            log.info("ticketId:" + ticket._id);
                            curCount++;
                            var name = 'count' + ticket.pType + ticket.bType;
                            var bonusInfo = check[name]({number:ticket.number});
                            ticket.dNumber = dTerm.wNum;
                            log.info(bonusInfo);
                            //保存中獎或者未中獎通知
                            self.sendMsg(ticket, bonusInfo, function(err, data){
                                if(err)
                                {
                                    callback(err);
                                    return;
                                }
                                //更新數據庫
                                ticketSer.updateBonusInfo(ticket, function(err, data){
                                    callback(err);
                                })
                            })
                        }
                    });
                },
                function (err) {
                    cb(err, curCount);
                }
            );
        }
    ], function (err, count) {
        log.info(colName + ",算奖完成,总记录数:" + count);
        cursor.close();
        cb(err);
    });
}

/**
 * 对单张票进行算奖
 * @param msg
 * @param dTerm
 * @param cb
 */
IssueModel.prototype.checkTicket = function(ticket)
{
    var self = this;

}


IssueModel.prototype.sendMsg = function(ticket, bonusInfo, cb)
{
    var self = this;
    ticket.id = ticket._id;
    ticket.bonus = bonusInfo.bonus;
    ticket.bonusBeforeTax = bonusInfo.bonusBeforeTax;
    ticket.bonusDetail = bonusInfo.bonusDetail;
    if(ticket.bonus > 0)
    {
        ticket.status = ticketStatus.HIT;
    }
    else
    {
        ticket.status = ticketStatus.NOT_HIT;
    }
    delete ticket._id;
    delete ticket.version;
    delete ticket.takeTime;
    delete ticket.printId;
    notifySer.saveTicket(ticket, function(err, data){
        cb(err, data);
    });
}

module.exports = new IssueModel();