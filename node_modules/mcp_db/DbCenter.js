var async = require('async');
var prop = require('mcp_config').prop;
var esdb = require('easy_db');
var esut = require('easy_util');
var Database = esdb.Database;
var Table = esdb.Table;
var Column = esdb.Column;
var log = esut.log;

var DbCenter = function(){
    var self = this;
};

DbCenter.prototype.init = function(cb)
{
    var self = this;
    esdb.log.setShowLog(true);
    async.waterfall([
        //the mysql
        function(cb){
            self._initMain(function(err){
                cb(err);
            });
        },
        //the mongodb
        function(cb){
            self._initMg(function(err){
                cb(err);
            });
        }
        ,
        //the mongodb 消息库
        function(cb){
            self._initMgMsg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype.check = function(cb)
{
    var self = this;
    async.waterfall([
        //check the mysql
        function(cb){
            self._checkMain(function(err){
                cb(err);
            });
        },
        //check the mongodb
        function(cb){
            self._checkMg(function(err){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype._initMg = function(cb)
{
    var self = this;
    var db = new Database(prop.dbs[0]);

    //add tables
    var uniqueIdTable = new Table(db, "uniqueId", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false)
    ]);
    db.put(uniqueIdTable);
    var stInfoTable = new Table(db, "stInfo", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "st", "varchar", 32, false, undefined),
        new Column(db, "lastActiveTime", "bigint", -1, false, undefined)
    ]);
    db.put(stInfoTable);
    self.mg = db;
    self.mg.init(cb);
};

/**
 * 初始化消息库
 * @param cb
 * @private
 */
DbCenter.prototype._initMgMsg = function(cb)
{
    var self = this;
    var db = new Database(prop.dbs[2]);

    //消息
    var msg = new Table(db, "msg", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),    //消息的id
        new Column(db, "parentId", "varchar", 80, false, undefined),    //消息的父消息id
        new Column(db, "type", "int", 11, false, undefined),    //消息的类型
        new Column(db, "subCount", "int", 11, false, 0), //子消息的数目
        new Column(db, "finishCount", "int", 11, false, 0), //子消息的数目
        new Column(db, "version", "int", 11, false, 0),
        new Column(db, "status", "int", 11, false, undefined),   //消息的状态
        new Column(db, "createTime", "bigint", -1, false, undefined)   //创建时间
    ]);
    db.put(msg);
    //消息内容
    var detail_term = new Table(db, "detail_term", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "msgId", "varchar", 80, false, undefined),
        new Column(db, "gameCode", "varchar", 20, false, undefined),
        new Column(db, "code", "varchar", 40, false, undefined),
        new Column(db, "nextCode", "varchar", 40, false, undefined),
        new Column(db, "status", "int", 11, false, -1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(detail_term);
    self.mg_msg = db;
    self.mg_msg.init(cb);
}

DbCenter.prototype._checkMg = function(cb)
{
    var self = this;
    cb(null);
};

DbCenter.prototype._checkMain = function(cb)
{
    var self = this;
    cb(null);
};

DbCenter.prototype._initMain = function(cb)
{
    var self = this;
    var db = new Database(prop.dbs[1]);
    var term = new Table(db, "term", [
        new Column(db, "id", "varchar", 80, false, undefined, true, false),
        new Column(db, "gameCode", "varchar", 20, false, undefined),
        new Column(db, "code", "varchar", 40, false, undefined),
        new Column(db, "nextCode", "varchar", 40, false, undefined),
        new Column(db, "openTime", "date", -1, false, undefined),
        new Column(db, "closeTime", "date", -1, false, undefined),
        new Column(db, "status", "int", 11, false, -1),
        new Column(db, "pool", "bigint", 11, false, -1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(term);
    var customer = new Table(db, "customer", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "password", "varchar", 40, false, undefined),
        new Column(db, "type", "int", 11, false, 0),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(customer);
    var operation = new Table(db, "operation", [
        new Column(db, "id", "varchar", 40, false, undefined, true, false),
        new Column(db, "userType", "int", 11, false, undefined),
        new Column(db, "hasChildren", "int", 11, false, 0),
        new Column(db, "name", "varchar", 20, false, undefined),
        new Column(db, "parent", "varchar", 40, false, ''),
        new Column(db, "url", "varchar", 80, false, undefined),
        new Column(db, "status", "int", 11, false, 1),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(operation);
    self.main = db;
    self.main.init(cb);
};

module.exports = new DbCenter();

