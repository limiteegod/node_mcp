var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;
var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;
var termSer = require("mcp_service").termSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var ClientTermHandle = function(){};

ClientTermHandle.prototype.handle = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.PRE_ON_SALE)
            {
                self.open(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PREEND)
            {
                self.close(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PRE_SEND)
            {
                self.backClose(msg, dTerm, cb);
            }
            else
            {
                cb(null);
            }
        },
        //标记消息已经处理完成
        function(cb)
        {
            var table = dc.mg_msg.get("msg");
            table.findAndModify({_id:msg._id}, {},
            {$set:{status:msgStatus.HANDLED}}, [], function(err, data){
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 期次开售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.open = function(msg, dTerm, cb)
{
    log.info(dTerm);
    cb(null);
}

/**
 * 期次停售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.close = function(msg, dTerm, cb)
{
    log.info(dTerm);
    cb(null);
}


/**
 * 期次后台停售
 * @param msg
 * @param detail_term
 * @param cb
 */
ClientTermHandle.prototype.backClose = function(msg, dTerm, cb)
{
    log.info(dTerm);
    cb(null);
}

module.exports = new ClientTermHandle();