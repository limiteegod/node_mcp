var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;

var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;
var notifySer = service.notifySer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var MasterTermHandle = function(){};

MasterTermHandle.prototype.handle = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.PRE_ON_SALE)
            {
                self.open(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PREEND)
            {
                self.close(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PRE_SEND)
            {
                self.backClose(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.IN_PAYOUT)
            {
                self.prize(msg, dTerm, cb);
            }
            else
            {
                cb(null, null);
            }
        },
        //标记消息已经处理完成
        function(data, cb)
        {
            msgSer.updateStatus(msg._id, msgStatus.FINISHED, cb);
        }
    ], function (err, result) {
        //如果有父消息，则处理父消息
        if(msg.parentId)
        {
            msgSer.childMsgFinished(msg, dTerm, function(err, msgAfter){
                if(err)
                {
                    cb(err, msgAfter);
                    return;
                }
                if(msgAfter && msgAfter.finishCount == msgAfter.subCount - 1)
                {
                    self.handleParent(msgAfter, dTerm, cb)
                }
                else
                {
                    cb(err, msgAfter);
                }
            });
        }
        else
        {
            cb(err, result);
        }
    });
}

/**
 * 父消息处理完成
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.handleParent = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.IN_CALCULATE)
            {
                self.check(msg, dTerm, function(err, data){
                    cb(err);
                });
            }
            else
            {
                cb(null);
            }
        },
        //标记消息已经处理完成
        function(cb)
        {
            msgSer.updateStatus(msg._id, msgStatus.FINISHED, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 期次开售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.open = function(msg, dTerm, cb)
{
    var self = this;
    var cond = {id:dTerm.termId, status:termStatus.ON_SALE};
    async.waterfall([
        //更新期次状态
        function(cb)
        {
            termSer.updateStatusById(cond, cb);
        },
        //生成期次通知
        function(term, cb)
        {
            notifySer.saveTerm(term, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 期次停售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.close = function(msg, dTerm, cb)
{
    var cond = {id:dTerm.termId, status:termStatus.END};
    async.waterfall([
        //更新期次状态
        function(cb)
        {
            termSer.updateStatusById(cond, cb);
        },
        //生成期次通知
        function(term, cb)
        {
            notifySer.saveTerm(term, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}


/**
 * 期次后台停售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.backClose = function(msg, dTerm, cb)
{
    var cond = {id:dTerm.termId, status:termStatus.WAITING_DRAW_NUMBER};
    termSer.updateStatusById(cond, cb);
}

/**
 * 期次算奖结算
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.check = function(msg, dTerm, cb)
{
    var cond = {id:dTerm.termId, status:termStatus.CALCULATE};
    termSer.updateStatusById(cond, cb);
}

/**
 * 期次返奖
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.prize = function(msg, dTerm, cb)
{
    var cond = {id:dTerm.termId, status:termStatus.PAYOUT};
    termSer.updateStatusById(cond, cb);
}

module.exports = new MasterTermHandle();