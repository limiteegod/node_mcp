var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;

var esut = require("easy_util");
var log = esut.log;
var digestUtil = esut.digestUtil;

var service = require("mcp_service");
var termSer = service.termSer;
var msgSer = service.msgSer;

var cons = require('mcp_constants');
var termStatus = cons.termStatus;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;

var MasterTermHandle = function(){};

MasterTermHandle.prototype.handle = function(msg, dTerm, cb)
{
    var self = this;
    async.waterfall([
        //处理消息
        function(cb)
        {
            if(dTerm.status == termStatus.PRE_ON_SALE)
            {
                self.open(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PREEND)
            {
                self.close(msg, dTerm, cb);
            }
            else if(dTerm.status == termStatus.PRE_SEND)
            {
                self.backClose(msg, dTerm, cb);
            }
            else
            {
                cb(null, null);
            }
        },
        //标记消息已经处理完成
        function(data, cb)
        {
            msgSer.updateStatus(msg._id, msgStatus.FINISHED, cb);
        }
    ], function (err, result) {
        cb(err, result);
    });
}

/**
 * 期次开售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.open = function(msg, dTerm, cb)
{
    log.info(dTerm);
    var cond = {id:dTerm.termId, status:termStatus.ON_SALE};
    termSer.updateStatusById(cond, cb);
}

/**
 * 期次停售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.close = function(msg, dTerm, cb)
{
    log.info(dTerm);
    var cond = {id:dTerm.termId, status:termStatus.END};
    termSer.updateStatusById(cond, cb);
    cb(null);
}


/**
 * 期次后台停售
 * @param msg
 * @param detail_term
 * @param cb
 */
MasterTermHandle.prototype.backClose = function(msg, dTerm, cb)
{
    log.info(dTerm);
    var cond = {id:dTerm.termId, status:termStatus.WAITING_DRAW_NUMBER};
    termSer.updateStatusById(cond, cb);
    cb(null);
}

module.exports = new MasterTermHandle();